#Types:
print(type(5))
my_dict = {}
print(type(my_dict))
my_list = []
print(type(my_list))

#Class:
class Facade:
  pass
facade_1 = Facade() #Instantiation
facade_1_type = type(facade_1)
print(facade_1_type)

#Variable Printing:
class Grade:
  minimum_passing = 65

grade = Grade()
print(grade.minimum_passing)

#Method
class Rules:
  def washing_brushes(self):
    return "Point bristles towards the basin while washing your brushes."

#Arguments
class Circle:
  pi = 3.14
  def area(self, radius):
    return Circle.pi * radius ** 2

circle = Circle() # Insatance of circle and converting to a variable

pizza_area = circle.area(12/2)
teaching_table_area = circle.area(36/2)
round_room_area = circle.area(11460/2)

#Constructor:
class Circle:
  pi = 3.14

  def __init__(self, diameter): #Creates constuctor
    print("New circle with diameter: {}".format(diameter)) #Prints New circle with diameter 36

teaching_table = Circle(36)

#Attribute Functions
can_we_count_it = [{'s': False}, "sassafrass", 18, ["a", "c", "s", "d", "s"]]

for element in can_we_count_it:
  if hasattr(element, "count"):
    print(str(type(element)) + " has the count attribute!")
  else:
    print(str(type(element)) + " does not have the count attribute :(")

#Displays objects attributes at runtime:
dir(5)
def this_function_is_an_object(self):
  pass
print(dir(this_function_is_an_object))

# Review
class Student:
  def __init__(self,name,year): #constuctor
    self.name = name
    self.year = year
    self.grades = [] #empty list

  def add_grade(self,grade):
    if type(grade) is Grade:
      self.grades.append(grade)

class Grade:
  minimum_passing = 65 #attribute
  def __init__(self,score):
    self.score = score

roger = Student("Roger van der Weyden",10) #3 instances
sandro = Student("Sandro Botticelli",12)
pieter = Student("Pieter Bruegel the Elder",8)
pieter.add_grade(Grade(100))
