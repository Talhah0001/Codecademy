#Using Declarative Code

from collections import namedtuple

country = namedtuple("country",["name","capital","continent"])

France = country("France","Paris","Europe")
Japan = country("Japan","Tokyo","Asia")
Senegal = country("Senegal","Dakar","Africa")

countries = (France,Japan,Senegal) #Will ouput the name capital and continent
--------------------------------------------------------------------------------
square = lambda x:x*x
--------------------------------------------------------------------------------
cube = lambda x:x*x*x
#Defines the square and cube function without using the name
#i.e def square is not needed
--------------------------------------------------------------------------------
from functools import reduce
nums = (16, 2, 19, 22, 10, 23, 16, 2, 27, 29, 19, 26, 12, 20, 16, 29, 6, 2, 12, 20)

filtered_numbers = filter(lambda x:x%2==0,nums) #This is a filter function (Applies function to each item and returns ones that are true)
print(tuple(filtered_numbers)) #removes odd numbers from list

mapped_numbers = map(lambda x:x*3,nums) #This is a map function (Applies function to every item)
print(tuple(mapped_numbers)) #Times all numbers list by 3

sum = reduce(lambda x,y: x+y,nums) #This is a reduce function (Returns an aggregated value so all numbers are formed into a cluster)
print(sum) # adds all numbers in list together
--------------------------------------------------------------------------------
functional_way = map(lambda x:x*3,filter(lambda y:y%3==0,nums)) #Map first then filter. Map usaully use x and filter use y.
print(tuple(functional_way)) #All numbers in list are times by 3
--------------------------------------------------------------------------------
from functools import reduce

fruits = {"Grape":(4, 6, 2), "Lemon":(7, 3, 1), "Orange":(5, 8, 1), "Apple":(2, 8, 10), "Watermelon":(0, 9, 6)}

total_fruits = reduce(lambda x,y:x+y, map(lambda a: fruits[a][0] + fruits[a][1] + fruits[a][2],fruits)) # combines reduce and map functions together
print(total_fruits) #Prints total amount of fruits sold being 72
--------------------------------------------------------------------------------
from functools import reduce

costs = {"shirt": (4, 13.00), "shoes":(2, 80.00), "pants":(3, 100.00), "socks":(5, 5.00), "ties":(3, 14.00), "watch":(1, 145.00)}

nums = (24, 6, 7, 16, 8, 2, 3, 11, 21, 20, 22, 23, 19, 12, 1, 4, 17, 9, 25, 15)

total = reduce(lambda x,y:x+y, filter(lambda c: c>150.00, map(lambda a: costs[a][0]*costs[a][1],costs))) #Using 3 functions
print(total) #Prints total cost of all items that are above Â£150
--------------------------------------------------------------------------------
